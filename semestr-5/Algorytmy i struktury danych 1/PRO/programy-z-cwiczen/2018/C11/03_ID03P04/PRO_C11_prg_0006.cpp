#include<iostream>
using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::ostream;
using std::istream;
///********************************************************************************************
///********************************************************************************************
class A{
    public:
        A(int, int);

        int GetX1();
        int GetX2();
        void Print(string="",string="", string="");

    private:
        int x1;
        int x2;
    };
///********************************************************************************************
class B:public A{
    public:
        B(int, int);
        int GetX1();
        void Print(string="",string="", string="");
    private:
        int x1;
    };
///********************************************************************************************
class C:public A{
    public:
        C(int, int);
        int GetX1();
        int GetX2();
        void Print(string="",string="", string="");
    private:
        int x1;
        int x2;
    };
///********************************************************************************************
///********************************************************************************************
A::A(int x1, int x2):x1(x1), x2(x2){}
///********************************************************************************************
int A::GetX1(){return x1;}
///********************************************************************************************
int A::GetX2(){return x2;}
///********************************************************************************************
void A::Print(string strB, string strM, string strE){
    cout<<strB<<x1<<strM<<x2<<strE;
    }
///********************************************************************************************
///********************************************************************************************
B::B(int x1, int x2):A(x1,x2), x1(x1+x2){}
///********************************************************************************************
int B::GetX1(){return x1;}
///********************************************************************************************
void B::Print(string strB, string strM, string strE){
    A::Print(strB, strM);
    cout<<strM<<x1<<strE;
    }
///********************************************************************************************
///********************************************************************************************
C::C(int x1, int x2):A(x1,x2){
    if(x1>x2){
        this->x1=x1;
        this->x2=x2;
        }
    else{
        this->x1=x2;
        this->x2=x1;
        }
    }
///********************************************************************************************
int C::GetX1(){return x1;}
///********************************************************************************************
int C::GetX2(){return x2;}
///********************************************************************************************
void C::Print(string strB, string strM, string strE){
    A::Print(strB, strM);
    cout<<strM<<x1<<strM<<x2<<strE;
    }
///********************************************************************************************
///********************************************************************************************
int main(){
    C myA(1,2);

    myA.Print("B:: (",",",") \n");

    return 0;
    }
    ///7, 8, 9
