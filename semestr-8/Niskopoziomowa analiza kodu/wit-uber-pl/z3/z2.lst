                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.3.3 Tue Mar 29 12:58:28 2011
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module z2
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wybor_wysw
                             12 	.globl _w4
                             13 	.globl _w3
                             14 	.globl _w2
                             15 	.globl _w1
                             16 	.globl _main
                             17 	.globl _init
                             18 	.globl _func_isr
                             19 	.globl _czekaj
                             20 	.globl _U10
                             21 	.globl _U15
                             22 	.globl _t
                             23 	.globl _zawart_wysw
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                    00A8     27 _IE	=	0x00a8
                    0089     28 _TMOD	=	0x0089
                    008D     29 _TH1	=	0x008d
                    008B     30 _TL1	=	0x008b
                    0088     31 _TCON	=	0x0088
                             32 ;--------------------------------------------------------
                             33 ; special function bits 
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; overlayable register banks 
                             37 ;--------------------------------------------------------
                             38 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      39 	.ds 8
                             40 ;--------------------------------------------------------
                             41 ; internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area DSEG    (DATA)
   0000                      44 _zawart_wysw::
   0000                      45 	.ds 4
   0004                      46 _t::
   0004                      47 	.ds 2
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area	OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; Stack segment in internal ram 
                             54 ;--------------------------------------------------------
                             55 	.area	SSEG	(DATA)
   0000                      56 __start__stack:
   0000                      57 	.ds	1
                             58 
                             59 ;--------------------------------------------------------
                             60 ; indirectly addressable internal ram data
                             61 ;--------------------------------------------------------
                             62 	.area ISEG    (DATA)
                             63 ;--------------------------------------------------------
                             64 ; bit data
                             65 ;--------------------------------------------------------
                             66 	.area BSEG    (BIT)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                    8000     71 _U15	=	0x8000
                    FFFF     72 _U10	=	0xffff
                             73 ;--------------------------------------------------------
                             74 ; external initialized ram data
                             75 ;--------------------------------------------------------
                             76 	.area XISEG   (XDATA)
                             77 ;--------------------------------------------------------
                             78 ; interrupt vector 
                             79 ;--------------------------------------------------------
                             80 	.area CSEG    (CODE)
   0000                      81 __interrupt_vect:
   0000 02s00r00             82 	ljmp	__sdcc_gsinit_startup
   0003 32                   83 	reti
   0004                      84 	.ds	7
   000B 32                   85 	reti
   000C                      86 	.ds	7
   0013 32                   87 	reti
   0014                      88 	.ds	7
   001B 02s00r46             89 	ljmp	_func_isr
   001E                      90 	.ds	5
   0023 32                   91 	reti
   0024                      92 	.ds	7
   002B 32                   93 	reti
   002C                      94 	.ds	7
                             95 ;--------------------------------------------------------
                             96 ; global & static initialisations
                             97 ;--------------------------------------------------------
                             98 	.area GSINIT  (CODE)
                             99 	.area GSFINAL (CODE)
                            100 	.area GSINIT  (CODE)
   0000                     101 __sdcc_gsinit_startup:
   0000 75 81rFF            102 	mov	sp,#__start__stack - 1
   0003 12s00r00            103 	lcall	__sdcc_external_startup
   0006 E5 82               104 	mov	a,dpl
   0008 60 03               105 	jz	__sdcc_init_data
   000A 02s00r33            106 	ljmp	__sdcc_program_startup
   000D                     107 __sdcc_init_data:
                            108 ;	_mcs51_genXINIT() start
   000D 74r00               109 	mov	a,#l_XINIT
   000F 44s00               110 	orl	a,#l_XINIT>>8
   0011 60 29               111 	jz	00003$
   0013 74r00               112 	mov	a,#s_XINIT
   0015 24r00               113 	add	a,#l_XINIT
   0017 F9                  114 	mov	r1,a
   0018 74s00               115 	mov	a,#s_XINIT>>8
   001A 34s00               116 	addc	a,#l_XINIT>>8
   001C FA                  117 	mov	r2,a
   001D 90s00r00            118 	mov	dptr,#s_XINIT
   0020 78r00               119 	mov	r0,#s_XISEG
   0022 75 A0s00            120 	mov	p2,#(s_XISEG >> 8)
   0025 E4                  121 00001$:	clr	a
   0026 93                  122 	movc	a,@a+dptr
   0027 F2                  123 	movx	@r0,a
   0028 A3                  124 	inc	dptr
   0029 08                  125 	inc	r0
   002A B8 00 02            126 	cjne	r0,#0,00002$
   002D 05 A0               127 	inc	p2
   002F E5 82               128 00002$:	mov	a,dpl
   0031 B5 01 F1            129 	cjne	a,ar1,00001$
   0034 E5 83               130 	mov	a,dph
   0036 B5 02 EC            131 	cjne	a,ar2,00001$
   0039 75 A0 FF            132 	mov	p2,#0xFF
   003C                     133 00003$:
                            134 ;	_mcs51_genXINIT() end
                            135 ;Z:\pn\z3\z2.c:77: int t= 0;
                            136 ;     genAssign
   003C E4                  137 	clr	a
   003D F5*05               138 	mov	(_t + 1),a
   003F F5*04               139 	mov	_t,a
                            140 	.area GSFINAL (CODE)
   0000 02s00r33            141 	ljmp	__sdcc_program_startup
                            142 ;--------------------------------------------------------
                            143 ; Home
                            144 ;--------------------------------------------------------
                            145 	.area HOME    (CODE)
                            146 	.area CSEG    (CODE)
                            147 ;--------------------------------------------------------
                            148 ; code
                            149 ;--------------------------------------------------------
                            150 	.area CSEG    (CODE)
   0033                     151 __sdcc_program_startup:
   0033 12s00rB9            152 	lcall	_main
                            153 ;	return from main will lock up
   0036 80 FE               154 	sjmp .
                            155 ;------------------------------------------------------------
                            156 ;Allocation info for local variables in function 'czekaj'
                            157 ;------------------------------------------------------------
                            158 ;------------------------------------------------------------
                            159 ;Z:\pn\z3\z2.c:67: void czekaj()
                            160 ;	-----------------------------------------
                            161 ;	 function czekaj
                            162 ;	-----------------------------------------
   0038                     163 _czekaj:
                    0002    164 	ar2 = 0x02
                    0003    165 	ar3 = 0x03
                    0004    166 	ar4 = 0x04
                    0005    167 	ar5 = 0x05
                    0006    168 	ar6 = 0x06
                    0007    169 	ar7 = 0x07
                    0000    170 	ar0 = 0x00
                    0001    171 	ar1 = 0x01
                            172 ;Z:\pn\z3\z2.c:70: for( i= 0; i< 30000; i++);
                            173 ;     genAssign
   0038 7A 30               174 	mov	r2,#0x30
   003A 7B 75               175 	mov	r3,#0x75
   003C                     176 00103$:
                            177 ;     genDjnz
                            178 ;     genMinus
                            179 ;     genMinusDec
   003C 1A                  180 	dec	r2
   003D BA FF 01            181 	cjne	r2,#0xff,00108$
   0040 1B                  182 	dec	r3
   0041                     183 00108$:
                            184 ;     genIfx
   0041 EA                  185 	mov	a,r2
   0042 4B                  186 	orl	a,r3
                            187 ;     genIfxJump
                            188 ;       Peephole 109   removed ljmp by inverse jump logic
   0043 70 F7               189 	jnz  00103$
   0045                     190 00109$:
   0045                     191 00104$:
   0045 22                  192 	ret
                            193 ;------------------------------------------------------------
                            194 ;Allocation info for local variables in function 'func_isr'
                            195 ;------------------------------------------------------------
                            196 ;------------------------------------------------------------
                            197 ;Z:\pn\z3\z2.c:80: void func_isr (void) interrupt 3
                            198 ;	-----------------------------------------
                            199 ;	 function func_isr
                            200 ;	-----------------------------------------
   0046                     201 _func_isr:
   0046 C0 E0               202 	push	acc
   0048 C0 F0               203 	push	b
   004A C0 82               204 	push	dpl
   004C C0 83               205 	push	dph
   004E C0 02               206 	push	ar2
   0050 C0 00               207 	push	ar0
   0052 C0 D0               208 	push	psw
   0054 75 D0 00            209 	mov	psw,#0x00
                            210 ;Z:\pn\z3\z2.c:82: if (t > 3) t = 0;
                            211 ;     genCmpGt
                            212 ;     genCmp
   0057 C3                  213 	clr	c
   0058 74 03               214 	mov	a,#0x03
   005A 95*04               215 	subb	a,_t
                            216 ;       Peephole 159   avoided xrl during execution
   005C 74 80               217 	mov  a,#(0x00 ^ 0x80)
   005E 85*05 F0            218 	mov	b,(_t + 1)
   0061 63 F0 80            219 	xrl	b,#0x80
   0064 95 F0               220 	subb	a,b
                            221 ;     genIfxJump
                            222 ;       Peephole 108   removed ljmp by inverse jump logic
   0066 50 05               223 	jnc  00102$
   0068                     224 00106$:
                            225 ;     genAssign
   0068 E4                  226 	clr	a
   0069 F5*05               227 	mov	(_t + 1),a
   006B F5*04               228 	mov	_t,a
   006D                     229 00102$:
                            230 ;Z:\pn\z3\z2.c:84: U15 = wybor_wysw[t];
                            231 ;     genPlus
   006D E5*04               232 	mov	a,_t
   006F 24r6C               233 	add	a,#_wybor_wysw
   0071 F5 82               234 	mov	dpl,a
   0073 E5*05               235 	mov	a,(_t + 1)
   0075 34s01               236 	addc	a,#(_wybor_wysw >> 8)
   0077 F5 83               237 	mov	dph,a
                            238 ;     genPointerGet
                            239 ;     genCodePointerGet
   0079 E4                  240 	clr	a
   007A 93                  241 	movc	a,@a+dptr
                            242 ;     genAssign
                            243 ;       Peephole 100   removed redundant mov
   007B FA                  244 	mov  r2,a
   007C 90 80 00            245 	mov  dptr,#_U15
   007F F0                  246 	movx @dptr,a
                            247 ;Z:\pn\z3\z2.c:85: U10 = cyfra_n;
                            248 ;     genAssign
   0080 90 FF FF            249 	mov	dptr,#_U10
                            250 ;       Peephole 180   changed mov to clr
   0083 E4                  251 	clr  a
   0084 F0                  252 	movx	@dptr,a
                            253 ;Z:\pn\z3\z2.c:86: U10 = zawart_wysw[t];
                            254 ;     genPlus
   0085 E5*04               255 	mov	a,_t
   0087 24r00               256 	add	a,#_zawart_wysw
   0089 F8                  257 	mov	r0,a
                            258 ;     genPointerGet
                            259 ;     genNearPointerGet
   008A 90 FF FF            260 	mov	dptr,#_U10
   008D E6                  261 	mov	a,@r0
   008E F0                  262 	movx	@dptr,a
                            263 ;Z:\pn\z3\z2.c:88: t++;
                            264 ;     genPlus
                            265 ;     genPlusIncr
   008F 74 01               266 	mov	a,#0x01
   0091 25*04               267 	add	a,_t
   0093 F5*04               268 	mov	_t,a
                            269 ;       Peephole 180   changed mov to clr
   0095 E4                  270 	clr  a
   0096 35*05               271 	addc	a,(_t + 1)
   0098 F5*05               272 	mov	(_t + 1),a
   009A                     273 00103$:
   009A D0 D0               274 	pop	psw
   009C D0 00               275 	pop	ar0
   009E D0 02               276 	pop	ar2
   00A0 D0 83               277 	pop	dph
   00A2 D0 82               278 	pop	dpl
   00A4 D0 F0               279 	pop	b
   00A6 D0 E0               280 	pop	acc
   00A8 32                  281 	reti
                            282 ;------------------------------------------------------------
                            283 ;Allocation info for local variables in function 'init'
                            284 ;------------------------------------------------------------
                            285 ;------------------------------------------------------------
                            286 ;Z:\pn\z3\z2.c:93: void init(void)
                            287 ;	-----------------------------------------
                            288 ;	 function init
                            289 ;	-----------------------------------------
   00A9                     290 _init:
                            291 ;Z:\pn\z3\z2.c:95: IE =	0x88;
                            292 ;     genAssign
   00A9 75 A8 88            293 	mov	_IE,#0x88
                            294 ;Z:\pn\z3\z2.c:96: TMOD =	0x20;  	    //tryb, nr licznika, czy z samoprzeladowaniem
                            295 ;     genAssign
   00AC 75 89 20            296 	mov	_TMOD,#0x20
                            297 ;Z:\pn\z3\z2.c:98: TH1 = TL1 = 0;     //Wartosc startowa
                            298 ;     genAssign
   00AF 75 8B 00            299 	mov	_TL1,#0x00
                            300 ;     genAssign
   00B2 75 8D 00            301 	mov	_TH1,#0x00
                            302 ;Z:\pn\z3\z2.c:100: TCON = 0x40;
                            303 ;     genAssign
   00B5 75 88 40            304 	mov	_TCON,#0x40
   00B8                     305 00101$:
   00B8 22                  306 	ret
                            307 ;------------------------------------------------------------
                            308 ;Allocation info for local variables in function 'main'
                            309 ;------------------------------------------------------------
                            310 ;a                         Allocated to registers 
                            311 ;------------------------------------------------------------
                            312 ;Z:\pn\z3\z2.c:107: main (void){
                            313 ;	-----------------------------------------
                            314 ;	 function main
                            315 ;	-----------------------------------------
   00B9                     316 _main:
                            317 ;Z:\pn\z3\z2.c:108: init();
                            318 ;     genCall
   00B9 12s00rA9            319 	lcall	_init
                            320 ;Z:\pn\z3\z2.c:113: for (a=0;a<12;a++)
   00BC                     321 00112$:
                            322 ;     genAssign
   00BC 7A 00               323 	mov	r2,#0x00
   00BE 7B 00               324 	mov	r3,#0x00
   00C0                     325 00104$:
                            326 ;     genCmpLt
                            327 ;     genCmp
   00C0 C3                  328 	clr	c
   00C1 EA                  329 	mov	a,r2
   00C2 94 0C               330 	subb	a,#0x0C
   00C4 EB                  331 	mov	a,r3
   00C5 64 80               332 	xrl	a,#0x80
   00C7 94 80               333 	subb	a,#0x80
                            334 ;     genIfxJump
                            335 ;       Peephole 108   removed ljmp by inverse jump logic
   00C9 50 F1               336 	jnc  00112$
   00CB                     337 00113$:
                            338 ;Z:\pn\z3\z2.c:116: zawart_wysw[0] = w1[a];
                            339 ;     genPlus
                            340 ;       Peephole 236g
   00CB EA                  341 	mov  a,r2
   00CC 24r3C               342 	add	a,#_w1
   00CE F5 82               343 	mov	dpl,a
                            344 ;       Peephole 236g
   00D0 EB                  345 	mov  a,r3
   00D1 34s01               346 	addc	a,#(_w1 >> 8)
   00D3 F5 83               347 	mov	dph,a
                            348 ;     genPointerGet
                            349 ;     genCodePointerGet
   00D5 E4                  350 	clr	a
   00D6 93                  351 	movc	a,@a+dptr
   00D7 FC                  352 	mov	r4,a
                            353 ;     genPointerSet
                            354 ;     genNearPointerSet
                            355 ;     genDataPointerSet
   00D8 8C*00               356 	mov	_zawart_wysw,r4
                            357 ;Z:\pn\z3\z2.c:118: zawart_wysw[1] = w2[a];
                            358 ;     genPlus
                            359 ;       Peephole 236g
   00DA EA                  360 	mov  a,r2
   00DB 24r48               361 	add	a,#_w2
   00DD F5 82               362 	mov	dpl,a
                            363 ;       Peephole 236g
   00DF EB                  364 	mov  a,r3
   00E0 34s01               365 	addc	a,#(_w2 >> 8)
   00E2 F5 83               366 	mov	dph,a
                            367 ;     genPointerGet
                            368 ;     genCodePointerGet
   00E4 E4                  369 	clr	a
   00E5 93                  370 	movc	a,@a+dptr
   00E6 FC                  371 	mov	r4,a
                            372 ;     genPointerSet
                            373 ;     genNearPointerSet
                            374 ;     genDataPointerSet
   00E7 8C*01               375 	mov	(_zawart_wysw + 0x0001),r4
                            376 ;Z:\pn\z3\z2.c:120: zawart_wysw[2] = w3[a];
                            377 ;     genPlus
                            378 ;       Peephole 236g
   00E9 EA                  379 	mov  a,r2
   00EA 24r54               380 	add	a,#_w3
   00EC F5 82               381 	mov	dpl,a
                            382 ;       Peephole 236g
   00EE EB                  383 	mov  a,r3
   00EF 34s01               384 	addc	a,#(_w3 >> 8)
   00F1 F5 83               385 	mov	dph,a
                            386 ;     genPointerGet
                            387 ;     genCodePointerGet
   00F3 E4                  388 	clr	a
   00F4 93                  389 	movc	a,@a+dptr
   00F5 FC                  390 	mov	r4,a
                            391 ;     genPointerSet
                            392 ;     genNearPointerSet
                            393 ;     genDataPointerSet
   00F6 8C*02               394 	mov	(_zawart_wysw + 0x0002),r4
                            395 ;Z:\pn\z3\z2.c:122: zawart_wysw[3] = w4[a];
                            396 ;     genPlus
                            397 ;       Peephole 236g
   00F8 EA                  398 	mov  a,r2
   00F9 24r60               399 	add	a,#_w4
   00FB F5 82               400 	mov	dpl,a
                            401 ;       Peephole 236g
   00FD EB                  402 	mov  a,r3
   00FE 34s01               403 	addc	a,#(_w4 >> 8)
   0100 F5 83               404 	mov	dph,a
                            405 ;     genPointerGet
                            406 ;     genCodePointerGet
   0102 E4                  407 	clr	a
   0103 93                  408 	movc	a,@a+dptr
   0104 FC                  409 	mov	r4,a
                            410 ;     genPointerSet
                            411 ;     genNearPointerSet
                            412 ;     genDataPointerSet
   0105 8C*03               413 	mov	(_zawart_wysw + 0x0003),r4
                            414 ;Z:\pn\z3\z2.c:124: czekaj();
                            415 ;     genCall
   0107 C0 02               416 	push	ar2
   0109 C0 03               417 	push	ar3
   010B 12s00r38            418 	lcall	_czekaj
   010E D0 03               419 	pop	ar3
   0110 D0 02               420 	pop	ar2
                            421 ;Z:\pn\z3\z2.c:125: czekaj();
                            422 ;     genCall
   0112 C0 02               423 	push	ar2
   0114 C0 03               424 	push	ar3
   0116 12s00r38            425 	lcall	_czekaj
   0119 D0 03               426 	pop	ar3
   011B D0 02               427 	pop	ar2
                            428 ;Z:\pn\z3\z2.c:126: czekaj();
                            429 ;     genCall
   011D C0 02               430 	push	ar2
   011F C0 03               431 	push	ar3
   0121 12s00r38            432 	lcall	_czekaj
   0124 D0 03               433 	pop	ar3
   0126 D0 02               434 	pop	ar2
                            435 ;Z:\pn\z3\z2.c:127: czekaj();
                            436 ;     genCall
   0128 C0 02               437 	push	ar2
   012A C0 03               438 	push	ar3
   012C 12s00r38            439 	lcall	_czekaj
   012F D0 03               440 	pop	ar3
   0131 D0 02               441 	pop	ar2
                            442 ;Z:\pn\z3\z2.c:113: for (a=0;a<12;a++)
                            443 ;     genPlus
                            444 ;     genPlusIncr
   0133 0A                  445 	inc	r2
   0134 BA 00 01            446 	cjne	r2,#0x00,00114$
   0137 0B                  447 	inc	r3
   0138                     448 00114$:
   0138 02s00rC0            449 	ljmp	00104$
   013B                     450 00108$:
   013B 22                  451 	ret
                            452 	.area CSEG    (CODE)
   013C                     453 _w1:
   013C 0B                  454 	.db #0x0B
   013D 03                  455 	.db #0x03
   013E 02                  456 	.db #0x02
   013F 00                  457 	.db #0x00
   0140 00                  458 	.db #0x00
   0141 00                  459 	.db #0x00
   0142 00                  460 	.db #0x00
   0143 00                  461 	.db #0x00
   0144 00                  462 	.db #0x00
   0145 10                  463 	.db #0x10
   0146 18                  464 	.db #0x18
   0147 19                  465 	.db #0x19
   0148                     466 _w2:
   0148 00                  467 	.db #0x00
   0149 02                  468 	.db #0x02
   014A 02                  469 	.db #0x02
   014B 02                  470 	.db #0x02
   014C 00                  471 	.db #0x00
   014D 00                  472 	.db #0x00
   014E 00                  473 	.db #0x00
   014F 00                  474 	.db #0x00
   0150 10                  475 	.db #0x10
   0151 10                  476 	.db #0x10
   0152 10                  477 	.db #0x10
   0153 00                  478 	.db #0x00
   0154                     479 _w3:
   0154 00                  480 	.db #0x00
   0155 00                  481 	.db #0x00
   0156 02                  482 	.db #0x02
   0157 02                  483 	.db #0x02
   0158 02                  484 	.db #0x02
   0159 00                  485 	.db #0x00
   015A 00                  486 	.db #0x00
   015B 10                  487 	.db #0x10
   015C 10                  488 	.db #0x10
   015D 10                  489 	.db #0x10
   015E 00                  490 	.db #0x00
   015F 00                  491 	.db #0x00
   0160                     492 _w4:
   0160 00                  493 	.db #0x00
   0161 00                  494 	.db #0x00
   0162 00                  495 	.db #0x00
   0163 02                  496 	.db #0x02
   0164 06                  497 	.db #0x06
   0165 46                  498 	.db #0x46
   0166 54                  499 	.db #0x54
   0167 50                  500 	.db #0x50
   0168 10                  501 	.db #0x10
   0169 00                  502 	.db #0x00
   016A 00                  503 	.db #0x00
   016B 00                  504 	.db #0x00
   016C                     505 _wybor_wysw:
   016C DF                  506 	.db #0xDF
   016D EF                  507 	.db #0xEF
   016E 7F                  508 	.db #0x7F
   016F BF                  509 	.db #0xBF
                            510 	.area XINIT   (CODE)
