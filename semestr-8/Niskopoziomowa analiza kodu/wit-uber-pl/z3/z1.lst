                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.3.3 Tue Mar 29 12:06:18 2011
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module z1
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wybor_wysw
                             12 	.globl _main
                             13 	.globl _init
                             14 	.globl _func_isr
                             15 	.globl _U10
                             16 	.globl _U15
                             17 	.globl _t
                             18 	.globl _zawart_wysw
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                    00A8     22 _IE	=	0x00a8
                    0089     23 _TMOD	=	0x0089
                    008D     24 _TH1	=	0x008d
                    008B     25 _TL1	=	0x008b
                    0088     26 _TCON	=	0x0088
                             27 ;--------------------------------------------------------
                             28 ; special function bits 
                             29 ;--------------------------------------------------------
                             30 ;--------------------------------------------------------
                             31 ; overlayable register banks 
                             32 ;--------------------------------------------------------
                             33 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      34 	.ds 8
                             35 ;--------------------------------------------------------
                             36 ; internal ram data
                             37 ;--------------------------------------------------------
                             38 	.area DSEG    (DATA)
   0000                      39 _zawart_wysw::
   0000                      40 	.ds 4
   0004                      41 _t::
   0004                      42 	.ds 2
                             43 ;--------------------------------------------------------
                             44 ; overlayable items in internal ram 
                             45 ;--------------------------------------------------------
                             46 	.area OSEG    (OVR,DATA)
                             47 ;--------------------------------------------------------
                             48 ; Stack segment in internal ram 
                             49 ;--------------------------------------------------------
                             50 	.area	SSEG	(DATA)
   0000                      51 __start__stack:
   0000                      52 	.ds	1
                             53 
                             54 ;--------------------------------------------------------
                             55 ; indirectly addressable internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area ISEG    (DATA)
                             58 ;--------------------------------------------------------
                             59 ; bit data
                             60 ;--------------------------------------------------------
                             61 	.area BSEG    (BIT)
                             62 ;--------------------------------------------------------
                             63 ; external ram data
                             64 ;--------------------------------------------------------
                             65 	.area XSEG    (XDATA)
                    8000     66 _U15	=	0x8000
                    FFFF     67 _U10	=	0xffff
                             68 ;--------------------------------------------------------
                             69 ; external initialized ram data
                             70 ;--------------------------------------------------------
                             71 	.area XISEG   (XDATA)
                             72 ;--------------------------------------------------------
                             73 ; interrupt vector 
                             74 ;--------------------------------------------------------
                             75 	.area CSEG    (CODE)
   0000                      76 __interrupt_vect:
   0000 02s00r00             77 	ljmp	__sdcc_gsinit_startup
   0003 32                   78 	reti
   0004                      79 	.ds	7
   000B 32                   80 	reti
   000C                      81 	.ds	7
   0013 32                   82 	reti
   0014                      83 	.ds	7
   001B 02s00r38             84 	ljmp	_func_isr
   001E                      85 	.ds	5
   0023 32                   86 	reti
   0024                      87 	.ds	7
   002B 32                   88 	reti
   002C                      89 	.ds	7
                             90 ;--------------------------------------------------------
                             91 ; global & static initialisations
                             92 ;--------------------------------------------------------
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
   0000                      96 __sdcc_gsinit_startup:
   0000 75 81rFF             97 	mov	sp,#__start__stack - 1
   0003 12s00r00             98 	lcall	__sdcc_external_startup
   0006 E5 82                99 	mov	a,dpl
   0008 60 03               100 	jz	__sdcc_init_data
   000A 02s00r33            101 	ljmp	__sdcc_program_startup
   000D                     102 __sdcc_init_data:
                            103 ;	_mcs51_genXINIT() start
   000D 74r00               104 	mov	a,#l_XINIT
   000F 44s00               105 	orl	a,#l_XINIT>>8
   0011 60 29               106 	jz	00003$
   0013 74r00               107 	mov	a,#s_XINIT
   0015 24r00               108 	add	a,#l_XINIT
   0017 F9                  109 	mov	r1,a
   0018 74s00               110 	mov	a,#s_XINIT>>8
   001A 34s00               111 	addc	a,#l_XINIT>>8
   001C FA                  112 	mov	r2,a
   001D 90s00r00            113 	mov	dptr,#s_XINIT
   0020 78r00               114 	mov	r0,#s_XISEG
   0022 75 A0s00            115 	mov	p2,#(s_XISEG >> 8)
   0025 E4                  116 00001$:	clr	a
   0026 93                  117 	movc	a,@a+dptr
   0027 F2                  118 	movx	@r0,a
   0028 A3                  119 	inc	dptr
   0029 08                  120 	inc	r0
   002A B8 00 02            121 	cjne	r0,#0,00002$
   002D 05 A0               122 	inc	p2
   002F E5 82               123 00002$:	mov	a,dpl
   0031 B5 01 F1            124 	cjne	a,ar1,00001$
   0034 E5 83               125 	mov	a,dph
   0036 B5 02 EC            126 	cjne	a,ar2,00001$
   0039 75 A0 FF            127 	mov	p2,#0xFF
   003C                     128 00003$:
                            129 ;	_mcs51_genXINIT() end
                            130 ;N:\pn\z3\z1.c:44: int t= 0;
                            131 ;     genAssign
   003C E4                  132 	clr	a
   003D F5*05               133 	mov	(_t + 1),a
   003F F5*04               134 	mov	_t,a
                            135 	.area GSFINAL (CODE)
   0000 02s00r33            136 	ljmp	__sdcc_program_startup
                            137 ;--------------------------------------------------------
                            138 ; Home
                            139 ;--------------------------------------------------------
                            140 	.area HOME    (CODE)
                            141 	.area CSEG    (CODE)
                            142 ;--------------------------------------------------------
                            143 ; code
                            144 ;--------------------------------------------------------
                            145 	.area CSEG    (CODE)
   0033                     146 __sdcc_program_startup:
   0033 12s00rAB            147 	lcall	_main
                            148 ;	return from main will lock up
   0036 80 FE               149 	sjmp .
                            150 ;------------------------------------------------------------
                            151 ;Allocation info for local variables in function 'func_isr'
                            152 ;------------------------------------------------------------
                            153 ;------------------------------------------------------------
                            154 ;N:\pn\z3\z1.c:47: void func_isr (void) interrupt 3
                            155 ;	-----------------------------------------
                            156 ;	 function func_isr
                            157 ;	-----------------------------------------
   0038                     158 _func_isr:
                    0002    159 	ar2 = 0x02
                    0003    160 	ar3 = 0x03
                    0004    161 	ar4 = 0x04
                    0005    162 	ar5 = 0x05
                    0006    163 	ar6 = 0x06
                    0007    164 	ar7 = 0x07
                    0000    165 	ar0 = 0x00
                    0001    166 	ar1 = 0x01
   0038 C0 E0               167 	push	acc
   003A C0 F0               168 	push	b
   003C C0 82               169 	push	dpl
   003E C0 83               170 	push	dph
   0040 C0 02               171 	push	ar2
   0042 C0 00               172 	push	ar0
   0044 C0 D0               173 	push	psw
   0046 75 D0 00            174 	mov	psw,#0x00
                            175 ;N:\pn\z3\z1.c:49: if (t > 3) t = 0;
                            176 ;     genCmpGt
                            177 ;     genCmp
   0049 C3                  178 	clr	c
   004A 74 03               179 	mov	a,#0x03
   004C 95*04               180 	subb	a,_t
                            181 ;       Peephole 159   avoided xrl during execution
   004E 74 80               182 	mov  a,#(0x00 ^ 0x80)
   0050 85*05 F0            183 	mov	b,(_t + 1)
   0053 63 F0 80            184 	xrl	b,#0x80
   0056 95 F0               185 	subb	a,b
                            186 ;     genIfxJump
                            187 ;       Peephole 108   removed ljmp by inverse jump logic
   0058 50 05               188 	jnc  00102$
   005A                     189 00106$:
                            190 ;     genAssign
   005A E4                  191 	clr	a
   005B F5*05               192 	mov	(_t + 1),a
   005D F5*04               193 	mov	_t,a
   005F                     194 00102$:
                            195 ;N:\pn\z3\z1.c:52: U15 = wybor_wysw[t];
                            196 ;     genPlus
   005F E5*04               197 	mov	a,_t
   0061 24rBD               198 	add	a,#_wybor_wysw
   0063 F5 82               199 	mov	dpl,a
   0065 E5*05               200 	mov	a,(_t + 1)
   0067 34s00               201 	addc	a,#(_wybor_wysw >> 8)
   0069 F5 83               202 	mov	dph,a
                            203 ;     genPointerGet
                            204 ;     genCodePointerGet
   006B E4                  205 	clr	a
   006C 93                  206 	movc	a,@a+dptr
                            207 ;     genAssign
                            208 ;       Peephole 100   removed redundant mov
   006D FA                  209 	mov  r2,a
   006E 90 80 00            210 	mov  dptr,#_U15
   0071 F0                  211 	movx @dptr,a
                            212 ;N:\pn\z3\z1.c:53: U10 = cyfra_n;
                            213 ;     genAssign
   0072 90 FF FF            214 	mov	dptr,#_U10
                            215 ;       Peephole 180   changed mov to clr
   0075 E4                  216 	clr  a
   0076 F0                  217 	movx	@dptr,a
                            218 ;N:\pn\z3\z1.c:54: U10 = zawart_wysw[t];
                            219 ;     genPlus
   0077 E5*04               220 	mov	a,_t
   0079 24r00               221 	add	a,#_zawart_wysw
   007B F8                  222 	mov	r0,a
                            223 ;     genPointerGet
                            224 ;     genNearPointerGet
   007C 90 FF FF            225 	mov	dptr,#_U10
   007F E6                  226 	mov	a,@r0
   0080 F0                  227 	movx	@dptr,a
                            228 ;N:\pn\z3\z1.c:56: t++;
                            229 ;     genPlus
                            230 ;     genPlusIncr
   0081 74 01               231 	mov	a,#0x01
   0083 25*04               232 	add	a,_t
   0085 F5*04               233 	mov	_t,a
                            234 ;       Peephole 180   changed mov to clr
   0087 E4                  235 	clr  a
   0088 35*05               236 	addc	a,(_t + 1)
   008A F5*05               237 	mov	(_t + 1),a
   008C                     238 00103$:
   008C D0 D0               239 	pop	psw
   008E D0 00               240 	pop	ar0
   0090 D0 02               241 	pop	ar2
   0092 D0 83               242 	pop	dph
   0094 D0 82               243 	pop	dpl
   0096 D0 F0               244 	pop	b
   0098 D0 E0               245 	pop	acc
   009A 32                  246 	reti
                            247 ;------------------------------------------------------------
                            248 ;Allocation info for local variables in function 'init'
                            249 ;------------------------------------------------------------
                            250 ;------------------------------------------------------------
                            251 ;N:\pn\z3\z1.c:60: void init(void)
                            252 ;	-----------------------------------------
                            253 ;	 function init
                            254 ;	-----------------------------------------
   009B                     255 _init:
                            256 ;N:\pn\z3\z1.c:62: IE =	0x88;
                            257 ;     genAssign
   009B 75 A8 88            258 	mov	_IE,#0x88
                            259 ;N:\pn\z3\z1.c:63: TMOD =	0x20;  	    //tryb, nr licznika, czy z samoprzeladowaniem
                            260 ;     genAssign
   009E 75 89 20            261 	mov	_TMOD,#0x20
                            262 ;N:\pn\z3\z1.c:65: TH1 = TL1 = 0;     //Wartosc startowa
                            263 ;     genAssign
   00A1 75 8B 00            264 	mov	_TL1,#0x00
                            265 ;     genAssign
   00A4 75 8D 00            266 	mov	_TH1,#0x00
                            267 ;N:\pn\z3\z1.c:67: TCON = 0x40;
                            268 ;     genAssign
   00A7 75 88 40            269 	mov	_TCON,#0x40
   00AA                     270 00101$:
   00AA 22                  271 	ret
                            272 ;------------------------------------------------------------
                            273 ;Allocation info for local variables in function 'main'
                            274 ;------------------------------------------------------------
                            275 ;------------------------------------------------------------
                            276 ;N:\pn\z3\z1.c:72: main (void){
                            277 ;	-----------------------------------------
                            278 ;	 function main
                            279 ;	-----------------------------------------
   00AB                     280 _main:
                            281 ;N:\pn\z3\z1.c:73: init();
                            282 ;     genCall
   00AB 12s00r9B            283 	lcall	_init
                            284 ;N:\pn\z3\z1.c:75: zawart_wysw[3] = cyfra_5;
                            285 ;     genPointerSet
                            286 ;     genNearPointerSet
                            287 ;     genDataPointerSet
   00AE 75*03 73            288 	mov	(_zawart_wysw + 0x0003),#0x73
                            289 ;N:\pn\z3\z1.c:76: zawart_wysw[2] = cyfra_6;
                            290 ;     genPointerSet
                            291 ;     genNearPointerSet
                            292 ;     genDataPointerSet
   00B1 75*02 7B            293 	mov	(_zawart_wysw + 0x0002),#0x7B
                            294 ;N:\pn\z3\z1.c:77: zawart_wysw[1] = cyfra_4;
                            295 ;     genPointerSet
                            296 ;     genNearPointerSet
                            297 ;     genDataPointerSet
   00B4 75*01 65            298 	mov	(_zawart_wysw + 0x0001),#0x65
                            299 ;N:\pn\z3\z1.c:78: zawart_wysw[0] = cyfra_9;
                            300 ;     genPointerSet
                            301 ;     genNearPointerSet
                            302 ;     genDataPointerSet
   00B7 75*00 77            303 	mov	_zawart_wysw,#0x77
   00BA                     304 00102$:
                            305 ;       Peephole 132   changed ljmp to sjmp
   00BA 80 FE               306 	sjmp 00102$
   00BC                     307 00104$:
   00BC 22                  308 	ret
                            309 	.area CSEG    (CODE)
   00BD                     310 _wybor_wysw:
   00BD DF                  311 	.db #0xDF
   00BE EF                  312 	.db #0xEF
   00BF 7F                  313 	.db #0x7F
   00C0 BF                  314 	.db #0xBF
                            315 	.area XINIT   (CODE)
