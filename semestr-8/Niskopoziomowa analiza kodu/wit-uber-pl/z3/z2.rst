                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.3.3 Tue Mar 29 12:58:28 2011
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module z2
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wybor_wysw
                             12 	.globl _w4
                             13 	.globl _w3
                             14 	.globl _w2
                             15 	.globl _w1
                             16 	.globl _main
                             17 	.globl _init
                             18 	.globl _func_isr
                             19 	.globl _czekaj
                             20 	.globl _U10
                             21 	.globl _U15
                             22 	.globl _t
                             23 	.globl _zawart_wysw
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                    00A8     27 _IE	=	0x00a8
                    0089     28 _TMOD	=	0x0089
                    008D     29 _TH1	=	0x008d
                    008B     30 _TL1	=	0x008b
                    0088     31 _TCON	=	0x0088
                             32 ;--------------------------------------------------------
                             33 ; special function bits 
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; overlayable register banks 
                             37 ;--------------------------------------------------------
                             38 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      39 	.ds 8
                             40 ;--------------------------------------------------------
                             41 ; internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area DSEG    (DATA)
   0008                      44 _zawart_wysw::
   0008                      45 	.ds 4
   000C                      46 _t::
   000C                      47 	.ds 2
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area	OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; Stack segment in internal ram 
                             54 ;--------------------------------------------------------
                             55 	.area	SSEG	(DATA)
   000E                      56 __start__stack:
   000E                      57 	.ds	1
                             58 
                             59 ;--------------------------------------------------------
                             60 ; indirectly addressable internal ram data
                             61 ;--------------------------------------------------------
                             62 	.area ISEG    (DATA)
                             63 ;--------------------------------------------------------
                             64 ; bit data
                             65 ;--------------------------------------------------------
                             66 	.area BSEG    (BIT)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                    8000     71 _U15	=	0x8000
                    FFFF     72 _U10	=	0xffff
                             73 ;--------------------------------------------------------
                             74 ; external initialized ram data
                             75 ;--------------------------------------------------------
                             76 	.area XISEG   (XDATA)
                             77 ;--------------------------------------------------------
                             78 ; interrupt vector 
                             79 ;--------------------------------------------------------
                             80 	.area CSEG    (CODE)
   4000                      81 __interrupt_vect:
   4000 02 41 74             82 	ljmp	__sdcc_gsinit_startup
   4003 32                   83 	reti
   4004                      84 	.ds	7
   400B 32                   85 	reti
   400C                      86 	.ds	7
   4013 32                   87 	reti
   4014                      88 	.ds	7
   401B 02 40 46             89 	ljmp	_func_isr
   401E                      90 	.ds	5
   4023 32                   91 	reti
   4024                      92 	.ds	7
   402B 32                   93 	reti
   402C                      94 	.ds	7
                             95 ;--------------------------------------------------------
                             96 ; global & static initialisations
                             97 ;--------------------------------------------------------
                             98 	.area GSINIT  (CODE)
                             99 	.area GSFINAL (CODE)
                            100 	.area GSINIT  (CODE)
   4174                     101 __sdcc_gsinit_startup:
   4174 75 81 0D            102 	mov	sp,#__start__stack - 1
   4177 12 41 70            103 	lcall	__sdcc_external_startup
   417A E5 82               104 	mov	a,dpl
   417C 60 03               105 	jz	__sdcc_init_data
   417E 02 40 33            106 	ljmp	__sdcc_program_startup
   4181                     107 __sdcc_init_data:
                            108 ;	_mcs51_genXINIT() start
   4181 74 00               109 	mov	a,#l_XINIT
   4183 44 00               110 	orl	a,#l_XINIT>>8
   4185 60 29               111 	jz	00003$
   4187 74 B8               112 	mov	a,#s_XINIT
   4189 24 00               113 	add	a,#l_XINIT
   418B F9                  114 	mov	r1,a
   418C 74 41               115 	mov	a,#s_XINIT>>8
   418E 34 00               116 	addc	a,#l_XINIT>>8
   4190 FA                  117 	mov	r2,a
   4191 90 41 B8            118 	mov	dptr,#s_XINIT
   4194 78 00               119 	mov	r0,#s_XISEG
   4196 75 A0 00            120 	mov	p2,#(s_XISEG >> 8)
   4199 E4                  121 00001$:	clr	a
   419A 93                  122 	movc	a,@a+dptr
   419B F2                  123 	movx	@r0,a
   419C A3                  124 	inc	dptr
   419D 08                  125 	inc	r0
   419E B8 00 02            126 	cjne	r0,#0,00002$
   41A1 05 A0               127 	inc	p2
   41A3 E5 82               128 00002$:	mov	a,dpl
   41A5 B5 01 F1            129 	cjne	a,ar1,00001$
   41A8 E5 83               130 	mov	a,dph
   41AA B5 02 EC            131 	cjne	a,ar2,00001$
   41AD 75 A0 FF            132 	mov	p2,#0xFF
   41B0                     133 00003$:
                            134 ;	_mcs51_genXINIT() end
                            135 ;Z:\pn\z3\z2.c:77: int t= 0;
                            136 ;     genAssign
   41B0 E4                  137 	clr	a
   41B1 F5 0D               138 	mov	(_t + 1),a
   41B3 F5 0C               139 	mov	_t,a
                            140 	.area GSFINAL (CODE)
   41B5 02 40 33            141 	ljmp	__sdcc_program_startup
                            142 ;--------------------------------------------------------
                            143 ; Home
                            144 ;--------------------------------------------------------
                            145 	.area HOME    (CODE)
                            146 	.area CSEG    (CODE)
                            147 ;--------------------------------------------------------
                            148 ; code
                            149 ;--------------------------------------------------------
                            150 	.area CSEG    (CODE)
   4033                     151 __sdcc_program_startup:
   4033 12 40 B9            152 	lcall	_main
                            153 ;	return from main will lock up
   4036 80 FE               154 	sjmp .
                            155 ;------------------------------------------------------------
                            156 ;Allocation info for local variables in function 'czekaj'
                            157 ;------------------------------------------------------------
                            158 ;------------------------------------------------------------
                            159 ;Z:\pn\z3\z2.c:67: void czekaj()
                            160 ;	-----------------------------------------
                            161 ;	 function czekaj
                            162 ;	-----------------------------------------
   4038                     163 _czekaj:
                    0002    164 	ar2 = 0x02
                    0003    165 	ar3 = 0x03
                    0004    166 	ar4 = 0x04
                    0005    167 	ar5 = 0x05
                    0006    168 	ar6 = 0x06
                    0007    169 	ar7 = 0x07
                    0000    170 	ar0 = 0x00
                    0001    171 	ar1 = 0x01
                            172 ;Z:\pn\z3\z2.c:70: for( i= 0; i< 30000; i++);
                            173 ;     genAssign
   4038 7A 30               174 	mov	r2,#0x30
   403A 7B 75               175 	mov	r3,#0x75
   403C                     176 00103$:
                            177 ;     genDjnz
                            178 ;     genMinus
                            179 ;     genMinusDec
   403C 1A                  180 	dec	r2
   403D BA FF 01            181 	cjne	r2,#0xff,00108$
   4040 1B                  182 	dec	r3
   4041                     183 00108$:
                            184 ;     genIfx
   4041 EA                  185 	mov	a,r2
   4042 4B                  186 	orl	a,r3
                            187 ;     genIfxJump
                            188 ;       Peephole 109   removed ljmp by inverse jump logic
   4043 70 F7               189 	jnz  00103$
   4045                     190 00109$:
   4045                     191 00104$:
   4045 22                  192 	ret
                            193 ;------------------------------------------------------------
                            194 ;Allocation info for local variables in function 'func_isr'
                            195 ;------------------------------------------------------------
                            196 ;------------------------------------------------------------
                            197 ;Z:\pn\z3\z2.c:80: void func_isr (void) interrupt 3
                            198 ;	-----------------------------------------
                            199 ;	 function func_isr
                            200 ;	-----------------------------------------
   4046                     201 _func_isr:
   4046 C0 E0               202 	push	acc
   4048 C0 F0               203 	push	b
   404A C0 82               204 	push	dpl
   404C C0 83               205 	push	dph
   404E C0 02               206 	push	ar2
   4050 C0 00               207 	push	ar0
   4052 C0 D0               208 	push	psw
   4054 75 D0 00            209 	mov	psw,#0x00
                            210 ;Z:\pn\z3\z2.c:82: if (t > 3) t = 0;
                            211 ;     genCmpGt
                            212 ;     genCmp
   4057 C3                  213 	clr	c
   4058 74 03               214 	mov	a,#0x03
   405A 95 0C               215 	subb	a,_t
                            216 ;       Peephole 159   avoided xrl during execution
   405C 74 80               217 	mov  a,#(0x00 ^ 0x80)
   405E 85 0D F0            218 	mov	b,(_t + 1)
   4061 63 F0 80            219 	xrl	b,#0x80
   4064 95 F0               220 	subb	a,b
                            221 ;     genIfxJump
                            222 ;       Peephole 108   removed ljmp by inverse jump logic
   4066 50 05               223 	jnc  00102$
   4068                     224 00106$:
                            225 ;     genAssign
   4068 E4                  226 	clr	a
   4069 F5 0D               227 	mov	(_t + 1),a
   406B F5 0C               228 	mov	_t,a
   406D                     229 00102$:
                            230 ;Z:\pn\z3\z2.c:84: U15 = wybor_wysw[t];
                            231 ;     genPlus
   406D E5 0C               232 	mov	a,_t
   406F 24 6C               233 	add	a,#_wybor_wysw
   4071 F5 82               234 	mov	dpl,a
   4073 E5 0D               235 	mov	a,(_t + 1)
   4075 34 41               236 	addc	a,#(_wybor_wysw >> 8)
   4077 F5 83               237 	mov	dph,a
                            238 ;     genPointerGet
                            239 ;     genCodePointerGet
   4079 E4                  240 	clr	a
   407A 93                  241 	movc	a,@a+dptr
                            242 ;     genAssign
                            243 ;       Peephole 100   removed redundant mov
   407B FA                  244 	mov  r2,a
   407C 90 80 00            245 	mov  dptr,#_U15
   407F F0                  246 	movx @dptr,a
                            247 ;Z:\pn\z3\z2.c:85: U10 = cyfra_n;
                            248 ;     genAssign
   4080 90 FF FF            249 	mov	dptr,#_U10
                            250 ;       Peephole 180   changed mov to clr
   4083 E4                  251 	clr  a
   4084 F0                  252 	movx	@dptr,a
                            253 ;Z:\pn\z3\z2.c:86: U10 = zawart_wysw[t];
                            254 ;     genPlus
   4085 E5 0C               255 	mov	a,_t
   4087 24 08               256 	add	a,#_zawart_wysw
   4089 F8                  257 	mov	r0,a
                            258 ;     genPointerGet
                            259 ;     genNearPointerGet
   408A 90 FF FF            260 	mov	dptr,#_U10
   408D E6                  261 	mov	a,@r0
   408E F0                  262 	movx	@dptr,a
                            263 ;Z:\pn\z3\z2.c:88: t++;
                            264 ;     genPlus
                            265 ;     genPlusIncr
   408F 74 01               266 	mov	a,#0x01
   4091 25 0C               267 	add	a,_t
   4093 F5 0C               268 	mov	_t,a
                            269 ;       Peephole 180   changed mov to clr
   4095 E4                  270 	clr  a
   4096 35 0D               271 	addc	a,(_t + 1)
   4098 F5 0D               272 	mov	(_t + 1),a
   409A                     273 00103$:
   409A D0 D0               274 	pop	psw
   409C D0 00               275 	pop	ar0
   409E D0 02               276 	pop	ar2
   40A0 D0 83               277 	pop	dph
   40A2 D0 82               278 	pop	dpl
   40A4 D0 F0               279 	pop	b
   40A6 D0 E0               280 	pop	acc
   40A8 32                  281 	reti
                            282 ;------------------------------------------------------------
                            283 ;Allocation info for local variables in function 'init'
                            284 ;------------------------------------------------------------
                            285 ;------------------------------------------------------------
                            286 ;Z:\pn\z3\z2.c:93: void init(void)
                            287 ;	-----------------------------------------
                            288 ;	 function init
                            289 ;	-----------------------------------------
   40A9                     290 _init:
                            291 ;Z:\pn\z3\z2.c:95: IE =	0x88;
                            292 ;     genAssign
   40A9 75 A8 88            293 	mov	_IE,#0x88
                            294 ;Z:\pn\z3\z2.c:96: TMOD =	0x20;  	    //tryb, nr licznika, czy z samoprzeladowaniem
                            295 ;     genAssign
   40AC 75 89 20            296 	mov	_TMOD,#0x20
                            297 ;Z:\pn\z3\z2.c:98: TH1 = TL1 = 0;     //Wartosc startowa
                            298 ;     genAssign
   40AF 75 8B 00            299 	mov	_TL1,#0x00
                            300 ;     genAssign
   40B2 75 8D 00            301 	mov	_TH1,#0x00
                            302 ;Z:\pn\z3\z2.c:100: TCON = 0x40;
                            303 ;     genAssign
   40B5 75 88 40            304 	mov	_TCON,#0x40
   40B8                     305 00101$:
   40B8 22                  306 	ret
                            307 ;------------------------------------------------------------
                            308 ;Allocation info for local variables in function 'main'
                            309 ;------------------------------------------------------------
                            310 ;a                         Allocated to registers 
                            311 ;------------------------------------------------------------
                            312 ;Z:\pn\z3\z2.c:107: main (void){
                            313 ;	-----------------------------------------
                            314 ;	 function main
                            315 ;	-----------------------------------------
   40B9                     316 _main:
                            317 ;Z:\pn\z3\z2.c:108: init();
                            318 ;     genCall
   40B9 12 40 A9            319 	lcall	_init
                            320 ;Z:\pn\z3\z2.c:113: for (a=0;a<12;a++)
   40BC                     321 00112$:
                            322 ;     genAssign
   40BC 7A 00               323 	mov	r2,#0x00
   40BE 7B 00               324 	mov	r3,#0x00
   40C0                     325 00104$:
                            326 ;     genCmpLt
                            327 ;     genCmp
   40C0 C3                  328 	clr	c
   40C1 EA                  329 	mov	a,r2
   40C2 94 0C               330 	subb	a,#0x0C
   40C4 EB                  331 	mov	a,r3
   40C5 64 80               332 	xrl	a,#0x80
   40C7 94 80               333 	subb	a,#0x80
                            334 ;     genIfxJump
                            335 ;       Peephole 108   removed ljmp by inverse jump logic
   40C9 50 F1               336 	jnc  00112$
   40CB                     337 00113$:
                            338 ;Z:\pn\z3\z2.c:116: zawart_wysw[0] = w1[a];
                            339 ;     genPlus
                            340 ;       Peephole 236g
   40CB EA                  341 	mov  a,r2
   40CC 24 3C               342 	add	a,#_w1
   40CE F5 82               343 	mov	dpl,a
                            344 ;       Peephole 236g
   40D0 EB                  345 	mov  a,r3
   40D1 34 41               346 	addc	a,#(_w1 >> 8)
   40D3 F5 83               347 	mov	dph,a
                            348 ;     genPointerGet
                            349 ;     genCodePointerGet
   40D5 E4                  350 	clr	a
   40D6 93                  351 	movc	a,@a+dptr
   40D7 FC                  352 	mov	r4,a
                            353 ;     genPointerSet
                            354 ;     genNearPointerSet
                            355 ;     genDataPointerSet
   40D8 8C 08               356 	mov	_zawart_wysw,r4
                            357 ;Z:\pn\z3\z2.c:118: zawart_wysw[1] = w2[a];
                            358 ;     genPlus
                            359 ;       Peephole 236g
   40DA EA                  360 	mov  a,r2
   40DB 24 48               361 	add	a,#_w2
   40DD F5 82               362 	mov	dpl,a
                            363 ;       Peephole 236g
   40DF EB                  364 	mov  a,r3
   40E0 34 41               365 	addc	a,#(_w2 >> 8)
   40E2 F5 83               366 	mov	dph,a
                            367 ;     genPointerGet
                            368 ;     genCodePointerGet
   40E4 E4                  369 	clr	a
   40E5 93                  370 	movc	a,@a+dptr
   40E6 FC                  371 	mov	r4,a
                            372 ;     genPointerSet
                            373 ;     genNearPointerSet
                            374 ;     genDataPointerSet
   40E7 8C 09               375 	mov	(_zawart_wysw + 0x0001),r4
                            376 ;Z:\pn\z3\z2.c:120: zawart_wysw[2] = w3[a];
                            377 ;     genPlus
                            378 ;       Peephole 236g
   40E9 EA                  379 	mov  a,r2
   40EA 24 54               380 	add	a,#_w3
   40EC F5 82               381 	mov	dpl,a
                            382 ;       Peephole 236g
   40EE EB                  383 	mov  a,r3
   40EF 34 41               384 	addc	a,#(_w3 >> 8)
   40F1 F5 83               385 	mov	dph,a
                            386 ;     genPointerGet
                            387 ;     genCodePointerGet
   40F3 E4                  388 	clr	a
   40F4 93                  389 	movc	a,@a+dptr
   40F5 FC                  390 	mov	r4,a
                            391 ;     genPointerSet
                            392 ;     genNearPointerSet
                            393 ;     genDataPointerSet
   40F6 8C 0A               394 	mov	(_zawart_wysw + 0x0002),r4
                            395 ;Z:\pn\z3\z2.c:122: zawart_wysw[3] = w4[a];
                            396 ;     genPlus
                            397 ;       Peephole 236g
   40F8 EA                  398 	mov  a,r2
   40F9 24 60               399 	add	a,#_w4
   40FB F5 82               400 	mov	dpl,a
                            401 ;       Peephole 236g
   40FD EB                  402 	mov  a,r3
   40FE 34 41               403 	addc	a,#(_w4 >> 8)
   4100 F5 83               404 	mov	dph,a
                            405 ;     genPointerGet
                            406 ;     genCodePointerGet
   4102 E4                  407 	clr	a
   4103 93                  408 	movc	a,@a+dptr
   4104 FC                  409 	mov	r4,a
                            410 ;     genPointerSet
                            411 ;     genNearPointerSet
                            412 ;     genDataPointerSet
   4105 8C 0B               413 	mov	(_zawart_wysw + 0x0003),r4
                            414 ;Z:\pn\z3\z2.c:124: czekaj();
                            415 ;     genCall
   4107 C0 02               416 	push	ar2
   4109 C0 03               417 	push	ar3
   410B 12 40 38            418 	lcall	_czekaj
   410E D0 03               419 	pop	ar3
   4110 D0 02               420 	pop	ar2
                            421 ;Z:\pn\z3\z2.c:125: czekaj();
                            422 ;     genCall
   4112 C0 02               423 	push	ar2
   4114 C0 03               424 	push	ar3
   4116 12 40 38            425 	lcall	_czekaj
   4119 D0 03               426 	pop	ar3
   411B D0 02               427 	pop	ar2
                            428 ;Z:\pn\z3\z2.c:126: czekaj();
                            429 ;     genCall
   411D C0 02               430 	push	ar2
   411F C0 03               431 	push	ar3
   4121 12 40 38            432 	lcall	_czekaj
   4124 D0 03               433 	pop	ar3
   4126 D0 02               434 	pop	ar2
                            435 ;Z:\pn\z3\z2.c:127: czekaj();
                            436 ;     genCall
   4128 C0 02               437 	push	ar2
   412A C0 03               438 	push	ar3
   412C 12 40 38            439 	lcall	_czekaj
   412F D0 03               440 	pop	ar3
   4131 D0 02               441 	pop	ar2
                            442 ;Z:\pn\z3\z2.c:113: for (a=0;a<12;a++)
                            443 ;     genPlus
                            444 ;     genPlusIncr
   4133 0A                  445 	inc	r2
   4134 BA 00 01            446 	cjne	r2,#0x00,00114$
   4137 0B                  447 	inc	r3
   4138                     448 00114$:
   4138 02 40 C0            449 	ljmp	00104$
   413B                     450 00108$:
   413B 22                  451 	ret
                            452 	.area CSEG    (CODE)
   413C                     453 _w1:
   413C 0B                  454 	.db #0x0B
   413D 03                  455 	.db #0x03
   413E 02                  456 	.db #0x02
   413F 00                  457 	.db #0x00
   4140 00                  458 	.db #0x00
   4141 00                  459 	.db #0x00
   4142 00                  460 	.db #0x00
   4143 00                  461 	.db #0x00
   4144 00                  462 	.db #0x00
   4145 10                  463 	.db #0x10
   4146 18                  464 	.db #0x18
   4147 19                  465 	.db #0x19
   4148                     466 _w2:
   4148 00                  467 	.db #0x00
   4149 02                  468 	.db #0x02
   414A 02                  469 	.db #0x02
   414B 02                  470 	.db #0x02
   414C 00                  471 	.db #0x00
   414D 00                  472 	.db #0x00
   414E 00                  473 	.db #0x00
   414F 00                  474 	.db #0x00
   4150 10                  475 	.db #0x10
   4151 10                  476 	.db #0x10
   4152 10                  477 	.db #0x10
   4153 00                  478 	.db #0x00
   4154                     479 _w3:
   4154 00                  480 	.db #0x00
   4155 00                  481 	.db #0x00
   4156 02                  482 	.db #0x02
   4157 02                  483 	.db #0x02
   4158 02                  484 	.db #0x02
   4159 00                  485 	.db #0x00
   415A 00                  486 	.db #0x00
   415B 10                  487 	.db #0x10
   415C 10                  488 	.db #0x10
   415D 10                  489 	.db #0x10
   415E 00                  490 	.db #0x00
   415F 00                  491 	.db #0x00
   4160                     492 _w4:
   4160 00                  493 	.db #0x00
   4161 00                  494 	.db #0x00
   4162 00                  495 	.db #0x00
   4163 02                  496 	.db #0x02
   4164 06                  497 	.db #0x06
   4165 46                  498 	.db #0x46
   4166 54                  499 	.db #0x54
   4167 50                  500 	.db #0x50
   4168 10                  501 	.db #0x10
   4169 00                  502 	.db #0x00
   416A 00                  503 	.db #0x00
   416B 00                  504 	.db #0x00
   416C                     505 _wybor_wysw:
   416C DF                  506 	.db #0xDF
   416D EF                  507 	.db #0xEF
   416E 7F                  508 	.db #0x7F
   416F BF                  509 	.db #0xBF
                            510 	.area XINIT   (CODE)
