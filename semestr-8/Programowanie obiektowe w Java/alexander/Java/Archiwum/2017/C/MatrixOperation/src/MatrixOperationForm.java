import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author alex
 */
public class MatrixOperationForm extends javax.swing.JFrame {

    private int MatrixSize = 0;
    private final Clipboard clip;

    public MatrixOperationForm() {
      initComponents();
      setMatrixSize(3);      
      MatrixSizeSpiner.setValue("3");
      AMatrix.getTableHeader().setVisible(false);
      BMatrix.getTableHeader().setVisible(false);
      CMatrix.getTableHeader().setVisible(false);
      clip = Toolkit.getDefaultToolkit().getSystemClipboard();
    }
    
    private void resizeJtable(JTable jtab,int NewMatrixSize)
    {
        Object[][] tb = new Object [NewMatrixSize][NewMatrixSize];
        String[] header = new String[NewMatrixSize];
        for(int y=0;y<NewMatrixSize;++y)
        {
            for(int x=0;x<NewMatrixSize;++x)
            {
                if((y>=jtab.getRowCount())||(x>=jtab.getColumnCount()))
                {
                   tb[y][x]=new Double(0);
                }
                else tb[y][x]=jtab.getValueAt(y,x);
            }
        }
        DefaultTableModel dtm=new DefaultTableModel(tb,header);
        jtab.setModel(dtm);
        jtab.getTableHeader().setVisible(false);
    }
    
    public int getMatrixSize()
    { 
        return MatrixSize;
    }
    
    public void setMatrixSize(int NewMatrixSize)
    {
        resizeJtable(AMatrix,NewMatrixSize);
        resizeJtable(BMatrix,NewMatrixSize);
        resizeJtable(CMatrix,NewMatrixSize);
        MatrixSize=NewMatrixSize;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      AScroll = new javax.swing.JScrollPane();
      AMatrix = new javax.swing.JTable();
      BScroll = new javax.swing.JScrollPane();
      BMatrix = new javax.swing.JTable();
      CScroll = new javax.swing.JScrollPane();
      CMatrix = new javax.swing.JTable();
      BtnAdd = new javax.swing.JToggleButton();
      BtnSub = new javax.swing.JToggleButton();
      BtnMul = new javax.swing.JToggleButton();
      MatrixSizeSpiner = new javax.swing.JSpinner();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      AMatrix.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)}
         },
         new String [] {
            "", "", ""
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }
      });
      AMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
      AMatrix.setCellSelectionEnabled(true);
      AMatrix.setEditingColumn(0);
      AMatrix.setEditingRow(0);
      AMatrix.setFillsViewportHeight(true);
      AMatrix.setName(""); // NOI18N
      AMatrix.setRowHeight(38);
      AMatrix.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            MatrixFocusGained(evt);
         }
      });
      AMatrix.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyTyped(java.awt.event.KeyEvent evt) {
            AMatrixKeyTyped(evt);
         }
      });
      AScroll.setViewportView(AMatrix);

      BMatrix.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)}
         },
         new String [] {
            "", "", ""
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }
      });
      BMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
      BMatrix.setCellSelectionEnabled(true);
      BMatrix.setEditingColumn(0);
      BMatrix.setEditingRow(0);
      BMatrix.setFillsViewportHeight(true);
      BMatrix.setName(""); // NOI18N
      BMatrix.setRowHeight(38);
      BMatrix.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            MatrixFocusGained(evt);
         }
      });
      BScroll.setViewportView(BMatrix);

      CMatrix.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)},
            { new Double(0.0),  new Double(0.0),  new Double(0.0)}
         },
         new String [] {
            "", "", ""
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }
      });
      CMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
      CMatrix.setCellSelectionEnabled(true);
      CMatrix.setEditingColumn(0);
      CMatrix.setEditingRow(0);
      CMatrix.setFillsViewportHeight(true);
      CMatrix.setName(""); // NOI18N
      CMatrix.setRowHeight(38);
      CScroll.setViewportView(CMatrix);

      BtnAdd.setSelected(true);
      BtnAdd.setText("+");
      BtnAdd.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            BtnAddActionPerformed(evt);
         }
      });

      BtnSub.setText("-");
      BtnSub.setDoubleBuffered(true);
      BtnSub.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            BtnSubActionPerformed(evt);
         }
      });

      BtnMul.setText("*");
      BtnMul.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            BtnMulActionPerformed(evt);
         }
      });

      MatrixSizeSpiner.setModel(new javax.swing.SpinnerListModel(new String[] {"2", "3", "4", "5", "6", "7", "8"}));
      MatrixSizeSpiner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
      MatrixSizeSpiner.setEditor(new javax.swing.JSpinner.ListEditor(MatrixSizeSpiner));
      MatrixSizeSpiner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            MatrixSizeSpinerStateChanged(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap(215, Short.MAX_VALUE)
                  .addComponent(MatrixSizeSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(BtnAdd))
               .addComponent(AScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(CScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(BtnSub)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(BtnMul)
                  .addGap(0, 210, Short.MAX_VALUE))
               .addComponent(BScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(AScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
               .addComponent(BScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(BtnAdd)
               .addComponent(BtnSub)
               .addComponent(BtnMul)
               .addComponent(MatrixSizeSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(CScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
        if(BtnAdd.isSelected())
        {
            BtnSub.setSelected(false);
            BtnMul.setSelected(false);
        }
        else BtnAdd.setSelected(true);
        for(int y=0;y<CMatrix.getRowCount();++y)
        {
            for(int x=0;x<CMatrix.getColumnCount();++x)
            {
                Double a=(Double)AMatrix.getValueAt(y, x);
                Double b=(Double)BMatrix.getValueAt(y, x);
                CMatrix.setValueAt(new Double(a+b), y, x);
            }
        }
    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSubActionPerformed
        if(BtnSub.isSelected())
        {
            BtnAdd.setSelected(false);
            BtnMul.setSelected(false);
        }
        else BtnSub.setSelected(true);
        for(int y=0;y<CMatrix.getRowCount();++y)
        {
            for(int x=0;x<CMatrix.getColumnCount();++x)
            {
                double a=(Double)AMatrix.getValueAt(y, x);
                double b=(Double)BMatrix.getValueAt(y, x);
                CMatrix.setValueAt(new Double(a-b), y, x);
            }
        }
    }//GEN-LAST:event_BtnSubActionPerformed

    private void BtnMulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMulActionPerformed
        if(BtnMul.isSelected())
        {
            BtnAdd.setSelected(false);
            BtnSub.setSelected(false);
        }
        else BtnMul.setSelected(true);
        for(int y=0;y<CMatrix.getRowCount();++y)
        {
            for(int x=0;x<CMatrix.getColumnCount();++x)
            {
                double sum=0;
                for(int z=0;z<BMatrix.getRowCount();++z)
                {
                    sum
                    +=
                        (double)(AMatrix.getValueAt(y, z))*
                        (double)(BMatrix.getValueAt(z, x))
                    ;
                }
                CMatrix.setValueAt(new Double(sum), y, x);
            }
        }
    }//GEN-LAST:event_BtnMulActionPerformed

    private void MatrixFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MatrixFocusGained
        if(BtnAdd.isSelected()) BtnAddActionPerformed(null);
        else if(BtnSub.isSelected()) BtnSubActionPerformed(null);
        else if(BtnMul.isSelected()) BtnMulActionPerformed(null);
    }//GEN-LAST:event_MatrixFocusGained

   private void MatrixSizeSpinerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MatrixSizeSpinerStateChanged
      int size = Integer.parseInt((String)MatrixSizeSpiner.getValue());
      setMatrixSize(size);
   }//GEN-LAST:event_MatrixSizeSpinerStateChanged

   private void AMatrixKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMatrixKeyTyped
      JTable jtab = (JTable)evt.getComponent();
      if(evt.getKeyChar()=='C'-'@') 
      {
         StringBuilder sb = new StringBuilder();
         for(int y=0;y<jtab.getRowCount();++y)
         {
            for(int x=0;x<jtab.getColumnCount();++x)
            {
               if(x>0) sb.append('\t');
               sb.append(jtab.getValueAt(y, x).toString());
            }
            sb.append('\n');
         }         
         StringSelection str=new StringSelection(sb.toString());
         clip.setContents(str, str);
      }
      else if(evt.getKeyChar()=='V'-'@') 
      {
         try 
         {
            String result = (String) clip.getData(DataFlavor.stringFlavor);
            
         }
         catch (Exception ex) 
         {
         }
      }
   }//GEN-LAST:event_AMatrixKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixOperationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixOperationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixOperationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixOperationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatrixOperationForm().setVisible(true);
            }
        });
    }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTable AMatrix;
   private javax.swing.JScrollPane AScroll;
   private javax.swing.JTable BMatrix;
   private javax.swing.JScrollPane BScroll;
   private javax.swing.JToggleButton BtnAdd;
   private javax.swing.JToggleButton BtnMul;
   private javax.swing.JToggleButton BtnSub;
   private javax.swing.JTable CMatrix;
   private javax.swing.JScrollPane CScroll;
   private javax.swing.JSpinner MatrixSizeSpiner;
   // End of variables declaration//GEN-END:variables
}
